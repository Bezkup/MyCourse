
Logo Udemy
ASP.NET Core per tutti: costruiamo un'applicazione web!
I tuoi progressi
Il testo della specifica

Il committente del progetto è la ditta Formazione srl (fittizia) che opera nell'ambito dell'editoria di corsi di formazione, divulgati attraverso supporti tradizionali come libri e DVD venduti in edicola. Dopo alcuni incontri, è emersa l'esigenza di entrare nel mercato dei corsi on-line. Si è deciso che il mezzo per fare questo è una piattaforma web per la vendita di corsi.

Le indagini di mercato hanno rivelato che la domanda di corsi online è in crescita e perciò si stima un progressivo aumentare del traffico web. Il team di sviluppo ha deciso di usare ASP.NET Core per via della sua snellezza e scalabilità.

Dopo un primo incontro con il committente, nel quale sono stati chiariti gli obiettivi di business, si è prodotta una specifica di una ventina di punti che vengono elencati di seguito.
Requisiti funzionali

Funzionalità da implementare nell'applicazione, già concordate con il committente.
Parte pubblica del sito (per visitatori anonimi e studenti)

    L'homepage deve presentare una selezioni di contenuti. In particolare deve visualizzare due liste: quella dei corsi aggiunti di recente (i 3 più recenti) e quella dei corsi con valutazione più alta (i 3 con valutazione più alta);

    Gli utenti devono poter visualizzare l'intero catalogo dei corsi pubblicati da una pagina di elenco. Per ogni corso in elenco, visualizzare un titolo, un'immagine rappresentativa, l'autore, la valutazione, il prezzo intero e il prezzo corrente di acquisto;

    Il prezzo corrente di acquisto deve essere inferiore o uguale al prezzo intero e devono avere entrambi la stessa valuta;

    Il catalogo dei corsi deve essere paginato (max 10 risultati per pagina) e deve supportare la ricerca per titolo e l'ordinamento per titolo, valutazione e prezzo corrente;

    Cliccando uno dei risultati nell'elenco, si accede alla pagina di dettaglio del corso contenente anche la descrizione completa, oltre agli altri valori già mostrati in elenco;

    Nella pagina di dettaglio del corso deve essere visualizzato l'elenco delle lezioni del corso con titolo, descrizione e durata stimata di completamento;

    Nella pagina di dettaglio del corso deve trovarsi un link a una pagina di contatto da cui lo studente potrà inviare domande al docente;

    Nella pagina di dettaglio del corso deve trovarsi un bottone per far registrare lo studente;

    La registazione a un corso ha successo solo dopo che lo studente ha completato il pagamento con Paypal. A quel punto lo studente è autorizzato ad accedere al contenuto delle lezioni;

    Lo studente può esprimere un voto da 1 a 5 sul corso, ma solo se è registrato a quel corso;

Gestione dei corsi (solo per i docenti)

    Nella pagina di elenco deve esserci un link alla pagina di creazione di un nuovo corso;

    Un docente deve poter creare un nuovo corso fornendo un titolo e l'autore (cioè il suo stesso nome);

    Allo stesso modo, nella pagina di dettaglio di un corso deve esserci un link alla pagina di modifica;

    La pagina di modifica deve consentire l'aggiornamento del titolo, la descrizione completa, il prezzo intero e attuale e l'immagine rappresentativa. L'autore non può essere modificato perché deve restare di proprietà di chi l'ha creato;

    Nella pagina di modifica, installare un editor WYSIWYG per consentire l'inserimento di descrizione formattata in HTML;

    La descrizione HTML del corso deve essere sicura, quindi il docente non può inserire script o altri contenuti malevoli. È consentito l'embed tramite iframe ma solo di video YouTube;

    Nella pagina di modifica, consentire la gestione delle lezioni del corso, che include inserimento, modifica ed eliminazione. Ciascuna lezione ha un titolo, una durata stimata per il completamento e un corpo HTML sicuro;

    Quando un corso viene creato, si trova in stato di "Draft" e non è visibile nella parte pubblica del sito finché il docente non decide di portarlo allo stato "Published". Il docente può riportare lo stato da "Published" a "Draft" ma il corso continuerà ad essere visibile agli studenti che si sono già iscritti;

    Per politica aziendale, un corso non può essere eliminato normalmente dal database. Tuttavia, può essere portato dal docente sullo stato "Deleted" che lo renderà di fatto invisibile e immodificabile da chiunque, compreso il docente;

    Un corso può essere portato sullo stato "Deleted" solo se non ci sono già iscritti;

    L'applicazione deve comunque rispettare la normativa del GDPR e quindi i docenti hanno diritto a visualizzare tutti i dati in possesso dell'applicazione. Inoltre, il docente ha diritto all'oblio e perciò, se decide di eliminare il proprio account, verranno fisicamente eliminati i suoi dati e tutti i corsi da lui creati. Lo staff di MyCourse esaminerà lo storico delle transazioni Paypal per capire a quali studenti andranno erogati i rimborsi;

    Le pagine di inserimento, modifica ed eliminazione devono ovviamente essere accessibili solo ai docenti.

Gestione degli utenti (solo per amministratori)

    Un utente amministratore può cambiare il ruolo di un utente registrato (nessun ruolo per gli studenti, ruolo "Teacher" per i docenti e ruolo "Administrator" per altri amministratori). Quindi ogni utente registrato può avere al massimo un solo ruolo.

Requisiti non funzionali

Come sviluppatore, decidi di realizzare un'applicazione di qualità e quindi vuoi integrare i seguenti accorgimenti nel prodotto finale.

    a) Hai scelto di usare ASP.NET Core perché è una tecnologia snella e che permetterà un'elevata scalabilità nel cloud per assecondare l'aumentare delle visite all'applicazione. Prima di iniziare, però, devi formarti sull'uso di questa tecnologia;

    b) Monitorerai le performance dell'applicazione per identificare eventuali disservizi che potrebbero limitare o impedire una corretta fruizione dell'applicazione da parte degli utenti;

    c) Terrai un log su file per tracciare le operazioni più importanti, come l'esito delle transazioni monetarie;

    d) Scriverai test unitari e d'integrazione per comprovare il corretto funzionamento dei componenti dell'applicazione.

    Panoramica
    D&R
    Segnalibri
    Annunci

PP
Percorso della request nei middleware
0
Paolo Strazzera · Lezione 19
· 8 mesi fa

Buongiorno Moreno,

al punto 19 (Gestire i file statici), nel video a 5:10 circa, dici che la richiesta viene catturata dal middleware dei file statici che fornisce la risposta. Però se metto un breakpoint sulla WriteAsync "Hello..." vedo che da là ci passa lo stesso, dopo avere servito l'immagine. Quindi la richiesta non si ferma, ma viene anche passata al middleware successivo. Perché?

Da quello che dici nel video non dovrebbe essere così: dove ho sbagliato? Ecco il mio codice. La cosa più buffa è che, se nella URL metto un nome di file che non esiste, ottengo DUE eccezioni nella stessa pagina, quella del file non trovato e quella del Null obj ref. Una sotto l'altra! E questo mi dice che persino il middleware UseDeveloperExceptionPage non si ferma!

Grazie, Paolo

                if (env.IsProduction())
                    app.UseHttpsRedirection();
                if (env.IsDevelopment())
                {
                    app.UseDeveloperExceptionPage();
                }
                app.UseStaticFiles();
                app.Run(async (context) =>
                {
                    string nome = context.Request.Query["nome"];
                    await context.Response.WriteAsync($"Hello {nome.ToUpper()}!");
                });

2 risposte
Moreno Gentili
Moreno — Insegnante
· 8 mesi fa
2

Hey ciao Paolo! Bravo per aver verificato :)

    dici che la richiesta viene catturata dal middleware dei file statici che fornisce la risposta. Però se metto un breakpoint sulla WriteAsync "Hello..." vedo che da là ci passa lo stesso

Sì, ti confermo che funziona come hai visto nel video: se il middleware dei file statici può gestire la richiesta (cioè se il file fisico esiste in wwwroot), allora risponde lui stesso. Puoi verificarlo qui, su GitHub, alla linea di codice dove lo StaticFileMiddleware esegue un return per uscire dal metodo. In questo modo impedisce che il middleware successivo vada in esecuzione, cosa che avverrebbe in questa riga qui.


*Penso* che il problema che stai osservando si verifichi perché il tuo browser sta inviando 2 richieste concorrenti.

- La prima richiesta è quella al file, a cui risponderà il middleware dei file statici;
- La seconda è una richiesta al file favicon.ico, che il browser richiede automaticamente quando si visita un sito qualsiasi. È l'iconcina che di solito viene visualizzata nella tab del browser. E dato che nella tua directory wwwroot probabilmente non esiste il file favicon.ico, allora il middleware dei file statici non può rispondere e lascia che il middleware successivo venga eseguito.

Per verificare che sia questo il caso, prova a vedere cosa vale la proprietà context.Request.Path, che ti dirà qual è il percorso della richiesta corrente. Lo puoi vedere in questa immagine:

    La cosa più buffa è che, se nella URL metto un nome di file che non esiste, ottengo DUE eccezioni nella stessa pagina

Sì, perché il browser continua a inviare una seconda richiesta a favicon.ico.  Prova a crearti il file favicon.ico dentro wwwroot (può anche essere un file vuoto, giusto per fare un test), vedrai che a quel punto l'applicazione comincerà a comportarsi come ti aspetti.


    E questo mi dice che persino il middleware UseDeveloperExceptionPage non si ferma!

Però il DeveloperExceptionPageMiddleware non ha lo scopo di fermare l'esecuzione. Infatti, quando arriva una richiesta non fa assolutamente nulla per impedire che il middleware successivo vada in esecuzione. Come si può vedere qui, si limita ad usare un try...catch in modo che se uno qualsiasi dei middleware a valle dovesse sollevare un'eccezione non gestita, si fa carico lui di catturarla e di produrre una risposta "sensata" per lo sviluppatore (cioè la pagina informativa con i dettagli dell'eccezione).

Fammi sapere se ho risposto al tuo quesito e se il problema dipendeva effettivamente da favicon.ico.

Ciao ciao,
Moreno
PP
Paolo Strazzera
· 8 mesi fa
1

Ti ringrazio per la risposta circostanziata! E sì, era favicon.ico la questione, anche se devo fare un po' di prove ulteriori, perché a me non sembrava che fossero DUE query http, ma una sola. Grazie anche del chiarimento sulle eccezioni.

Ho lavorato per anni su ASP.NET, dove il controllo su ciò che avviene è molto più stretto, e mi ci vorrà un po' ad assimilare questo modo più "indiretto" di lavorare.

Ciao!
R
Aggiungi una risposta
Contenuto del corso
Sezione 1: Introduzione ad
ASP.NET Core
6 / 6|20 min
Sezione 2: Il comando dotnet e
gli strumenti di sviluppo
2 / 5|33 min
Sezione 3: Usare Visual Studio
Code (per chi intende usarlo)
5 / 5|35 min
Sezione 4: Com'è fatto un
progetto ASP.NET Core?
8 / 9|55 min

14. Il file di progetto .csproj
8 min
15. Le directory bin e obj e la
compilazione del progetto
6 min
16. Preparare il web host dalla
classe Program
11 min
17. Configurare i parametri di avvio
con il file launchSettings.json
6 min
18. Usare middleware nella classe
Startup
13 min
19. Gestire i file statici e la directory
wwwroot
6 min
20. Riepilogo della sezione
5 min
Quiz 4: Verifica di saperti muovere
all'interno del progetto

    Esercizio di codifica 1: Rendirizza
    tutte le richieste HTTP verso l'end…

Sezione 5: Pronti per il mondo
reale: realizziamo insieme una …
2 / 6|42 min

21. Capire gli obiettivi e trovare
soluzioni tecniche
10 min
22. Il testo della specifica
4 min
23. Ridurre i rischi legati allo
sviluppo software con Git (per chi …
15 min
24. Scaricare il progetto da GitHub
10 min
25. Riepilogo della sezione
3 min

    Quiz 5: Verifica di conoscere i
    requisiti della specifica e i rudime…

Sezione 6: ASP.NET Core MVC: Il
Controller
0 / 7|51 min
Sezione 7: ASP.NET Core MVC: le
View
0 / 11|1 h 38 min
Sezione 8: ASP.NET Core MVC: il
Model
0 / 8|57 min
Sezione 9: Servizi e dependency
injection
0 / 6|39 min
Sezione 10: Accedere al database
con ADO.NET
0 / 12|1 h 49 min
Sezione 11: Accesso ai dati con
Entity Framework Core
0 / 14|2 h 42 min
Sezione 12: I servizi di ASP.NET
Core: configurazione, logging e …
0 / 18|2 h 59 min
Sezione 13: Ricerca, paginazione
e ordinamento
0 / 12|2 h 36 min
Sezione 14: Organizzare le view
in componenti
0 / 6|58 min
Sezione 15: Novità di .NET Core
3.0
0 / 8|59 min
Sezione 16: Persistere i dati
0 / 6|1 h 36 min
Sezione 17: BONUS! Librerie di
terze parti e tecniche alternative
0 / 10|2 h 4 min
Sezione 18: Appendice
0 / 2|4 min
Udemy
Copyright © 2019 Udemy, Inc.

    Condizioni Politica sulla privacy e Politica sui cookie Assistenza e supporto 

